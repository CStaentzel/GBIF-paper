#' @title
#' Keep invasive species data only
#' @description 
#' Keep exotic species data only
#' 
#' @author Cybill Staentzel \cybill.staentzel@engees.unistra.fr
#' 
#' @date 2023/01/24
#' 

## Import filtered GBIF data ---
dat    <- read.csv("to define by user.csv")

## Import filtered GBIF spatial data ---
dat_sf <- sf::st_read("to define by user.gpkg")

#Select only SpeciesxCountry keys from predefined lists (see Supplementary files)
Keys_JN_speciescountry <- read.csv("...Keys_JN_speciescountry.csv", sep=";")

#An example with one taxonomic group : Bivalvia
bivalvia_keys_final<- bivalvia_TRUE[bivalvia_TRUE$"concat" %in% unique(Keys_JN_speciescountry$"Keys_JN"), ]
names(bivalvia_keys_final)<-c("download_key","datasetKey","occurrenceID","year", "eventDate", "class", "order", "family", "genus", 
                              "species", "period", "sovereignt", "concat","geom")
View(bivalvia_keys_final)
sf::st_write(bivalvia_keys_final, "gbif_bivalvia_data_final.gpkg",delete_dsn = TRUE) 

#All were merged
tot_xeno<-rbind(clitellata_keys_final, polychaeta_keys_final,culicidae_keys_final,brachyceridae_keys_final,Coenagrionidae_keys_final,
                amphipoda_keys_final,decapoda_keys_final,isopoda_keys_final,mysidae_keys_final,Pectinatellidae_keys_final,Cordylophoridae_keys_final,
                on_keys_final,bivalvia_keys_final,gastropoda_keys_final,tricladida_keys_final)

#Here the final list for macroinvertebrates! -----
sf::st_write(tot_xeno, "gbif_data_final.gpkg",delete_dsn = TRUE)
tot_xeno <- sf::st_read(dsn = "gbif_data_final.gpkg", stringsAsFactors = FALSE) 

#for futher analyses, add a column = 1 -----
tot_xeno$PA<-c("1")
tot_xeno$PA<-as.numeric(tot_xeno$PA)
str(tot_xeno)

#Filter by providers----
#1 research works or observations by confirmed naturalists
#2 participatory and citizen science
#3 marine species
prov <- read.csv("...providers_referencenew_Inv.csv", sep=";") 
prov <- read.csv("...providers_reference_fish.csv", sep=";") 

prov$confidence_level<-as.factor(prov$confidence_level)
#only level 1.
prov1<-prov[prov$confidence_level=="1",]
str(prov1)
prov1$datasetkey
length(prov1$datasetkey)

#Keep only observation from providers level 1 
tot_xeno1<- tot_xeno[tot_xeno$"datasetKey" %in% unique(prov1$"datasetkey"), ]
length(unique(tot_xeno1$datasetKey))

#Join observations by catchment (level 6 to 12)----
library(sf)
library(s2)
library(dplyr)
library(tidyr)

##############################
#An example with level 12 (done from level 12 to 6) ----------
level12 <- 
  read_sf("hybas_eu_lev12_v1c.shp") %>% 
  select(polygon_id = HYBAS_ID)

sf_use_s2(FALSE)

spatialjoin_12_xeno1 <- sf::st_join(tot_xeno1, level12["polygon_id"])
sf::st_write(spatialjoin_12_xeno1, "gbif_data_level12_xeno1.gpkg",delete_dsn = TRUE)
write.csv(spatialjoin_12_xeno1, "gbif_data_level12_xeno1.csv", row.names = FALSE)
level12_gbif_xeno1 <- sf::st_read(dsn = "gbif_data_level12_xeno1.gpkg", stringsAsFactors = FALSE) 

#Obtain occurrence for each subcatchment ----
agglevel12_xeno1 <- aggregate(level12_gbif_xeno1$PA, by=list(level12_gbif_xeno1$species,level12_gbif_xeno1$polygon_id), FUN=sum)

#Put lines in row by catchment
xeno1_level12<-agglevel12_xeno1 %>% 
  group_by(Group.2) %>% 
  mutate(row_id = (Group.1)) %>% 
  pivot_wider(id_cols = "Group.2",  names_from = row_id,
              values_from = x, values_fill=0,
              names_glue = "{.value}{row_id}") %>% 
  ungroup()

xeno1_level12<-as.data.frame(xeno1_level12)

library(vegan)
xeno1_level12$S=specnumber(xeno1_level12[,-1])

#Global
agglevel12_xeno1 <- aggregate(level12_gbif_xeno1$PA, by=list(level12_gbif_xeno1$polygon_id), FUN=sum)
gbif_dataxeno1_level12 <- merge(x=xeno1_level12,y=agglevel12_xeno1, by.x=c("Group.2"), 
                                by.y=c("Group.1"))

colnames(gbif_dataxeno1_level12)[colnames(gbif_dataxeno1_level12) == 'x'] <- 'Occ_exotic'
colnames(gbif_dataxeno1_level12)[colnames(gbif_dataxeno1_level12) == 'S'] <- 'SR_exotic'
colnames(gbif_dataxeno1_level12)[colnames(gbif_dataxeno1_level12) == 'Group.2'] <- 'Catchment_ID'

#You can here reorder before and export
write.csv(gbif_dataxeno1_level12,"to define by user.csv",row.names = FALSE)

##For rarefaction
#We filtered by providers and calculate occurrences by subcatchment (level 6 to 12)